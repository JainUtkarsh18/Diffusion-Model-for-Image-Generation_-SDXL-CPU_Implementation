# -*- coding: utf-8 -*-
"""SDXL Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19qY0hiFUVhhxTlL382sFRSpLQL1y4Uj5
"""

# CPU-only stack (no CUDA, no xformers)
!pip -q uninstall -y xformers torch torchvision torchaudio peft || true

# Matching, CPU wheels (PyTorch 2.4 series)
!pip -q install torch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0

# Core libs (pinned) — hub pinned >=0.33.5 to satisfy Gradio
!pip -q install diffusers==0.30.2 transformers==4.43.3 accelerate==0.33.0 \
  safetensors==0.4.3 pillow==10.4.0 huggingface-hub==0.34.1

import os, time
print("✅ Installed. Restarting runtime…")
time.sleep(0.8)
os.kill(os.getpid(), 9)

from datetime import datetime
import os
from PIL import Image
import torch
from diffusers import StableDiffusionXLPipeline, DPMSolverMultistepScheduler, EulerAncestralDiscreteScheduler

DEVICE = "cpu"
DTYPE = torch.float32  # SDXL on CPU should run in fp32

def set_reproducible(seed: int):
    torch.manual_seed(seed)
    return torch.Generator(device=DEVICE).manual_seed(seed)

def pick_scheduler(name: str, pipe):
    name = (name or "").lower()
    if name in {"dpmpp", "dpmpp_2m"}:
        return DPMSolverMultistepScheduler.from_config(pipe.scheduler.config, use_karras=True)
    if name in {"euler_a", "euler-ancestral"}:
        return EulerAncestralDiscreteScheduler.from_config(pipe.scheduler.config)
    return pipe.scheduler  # default

def prepare_pipe(model_id: str, scheduler_name: str = "dpmpp_2m"):
    pipe = StableDiffusionXLPipeline.from_pretrained(
        model_id,
        torch_dtype=DTYPE,
        use_safetensors=True,
        add_watermarker=False,
    )
    pipe.scheduler = pick_scheduler(scheduler_name, pipe)
    pipe = pipe.to(DEVICE)
    pipe.enable_vae_slicing()
    pipe.enable_vae_tiling()
    return pipe

def sanitize_wh(x: int) -> int:
    # SDXL requires multiples of 8
    return int(round(x / 8) * 8)

def save_image(img: Image.Image, outdir: str, stem: str) -> str:
    os.makedirs(outdir, exist_ok=True)
    path = os.path.join(outdir, f"{stem}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
    img.save(path)
    return path

print("Running on:", DEVICE, "| dtype:", DTYPE)

prompt = "Cinematic shot of a cafe racer motorcycle on a rainy street at night, reflections, broken lights"
negative_prompt = "motion blur, blown highlights, low quality, chromatic aberration, watermark"
seed = 12345
steps = 28
guidance_scale = 6.5
width, height = 768, 768
scheduler_name = "dpmpp_2m" # or "euler_a" or "default"

#Run
g = set_reproducible(seed)
w, h = sanitize_wh(width), sanitize_wh(height)

base_id = "stabilityai/stable-diffusion-xl-base-1.0"
base = prepare_pipe(base_id, scheduler_name)

out = base(
    prompt=prompt,
    negative_prompt=negative_prompt or None,
    num_inference_steps=int(steps),
    guidance_scale=float(guidance_scale),
    width=w, height=h,
    generator=g,
)
img = out.images[0]
save_path = save_image(img, "sdxl_out_cpu", f"sdxl_base_seed{seed}_g{guidance_scale}_s{steps}_w{w}_h{h}")
display(img)
print("Saved to:", save_path)